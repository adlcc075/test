#ifndef LOG_PAESER_H
#define LOG_PAESER_H

#include "platform.h"

#define NULL 0

#define ROM_LOG_BUFFER_PTR	(0xD0)
#define ROM_LOG_BUFFER_ENTRY_NUM	64

typedef enum {
    ROM_LOG_BOOTMODE_INTERNAL_FUSE = 0x00010000,
    ROM_LOG_BOOTMODE_SERIAL = 0x00010001,
    ROM_LOG_BOOTMODE_INTERNAL = 0x00010002,
    ROM_LOG_BOOTMODE_TEST = 0x00010003,
    ROM_LOG_SEC_CONFIG_FAB = 0x00020000,
    ROM_LOG_SEC_CONFIG_RETURN = 0x00020033,
    ROM_LOG_SEC_CONFIG_OPEN = 0x000200F0,
    ROM_LOG_SEC_CONFIG_CLOSED = 0x000200CC,
    ROM_LOG_DIR_BT_DIS_VALUE0 = 0x00030000,
    ROM_LOG_DIR_BT_DIS_VALUE1 = 0x00030001,
    ROM_LOG_BT_FUSE_SEL_VALUE0 = 0x00040000,
    ROM_LOG_BT_FUSE_SEL_VALUE1 = 0x00040001,
    ROM_LOG_PRIM_IMAGE_SELECT = 0x00050000,
    ROM_LOG_SEC_IMAGE_SELECT = 0x00050001,
    ROM_LOG_PRIM_BOOTDEVICE_NAND = 0x00060000,
    ROM_LOG_PRIM_BOOTDEVICE_USDHC = 0x00060001,
    ROM_LOG_PRIM_BOOTDEVICE_SATA = 0x00060002,
    ROM_LOG_PRIM_BOOTDEVICE_I2C = 0x00060003,
    ROM_LOG_PRIM_BOOTDEVICE_ECSPI = 0x00060004,
    ROM_LOG_PRIM_BOOTDEVICE_NOR = 0x00060005,
    ROM_LOG_PRIM_BOOTDEVICE_ONENAND = 0x00060006,
    ROM_LOG_REC_BOOTDEVICE_I2C = 0x00061003,
    ROM_LOG_REC_BOOTDEVICE_ECSPI = 0x00061004,
    ROM_LOG_REC_BOOTDEVICE_NONE = 0x00061FFF,
    ROM_LOG_MFG_BOOTDEVICE_USDHC = 0x00062001,
    ROM_LOG_DEVICE_INIT_CALL = 0x00070000,
    ROM_LOG_DEVICE_INIT_PASS = 0x000700F0,
    ROM_LOG_DEVICE_INIT_FAIL = 0x00070033,
    ROM_LOG_DEVICE_READ_DATA_CALL = 0x00080000,
    ROM_LOG_DEVICE_READ_DATA_PASS = 0x000800F0,
    ROM_LOG_DEVICE_READ_DATA_FAIL = 0x00080033,
    ROM_LOG_AUTHENTICATION_STATUS = 0x00090000,
    ROM_LOG_PLUGIN_IMAGE_CALL = 0x000A0000,
    ROM_LOG_PLUGIN_IMAGE_PASS = 0x000A00F0,
    ROM_LOG_PLUGIN_IMAGE_FAIL = 0x000A0033,
    ROM_LOG_PROGRAM_IMAGE_CALL = 0x000B0000,
    ROM_LOG_SDP_ENTRY = 0x000C0000,
    ROM_LOG_SDP_IMAGE_CALL = 0x000D0000,
} pu_irom_log_entry_e;

typedef struct {
    unsigned int code;
    char *description;
    unsigned int has_data;
    int (*data_parser) (chip_e chip, unsigned int data);
} log_major_status_code_t, *log_major_status_code_p;

typedef struct {
    unsigned code;
    char *description;
} log_data_hab_subcode_t, *log_data_hab_subcode_p;

int parser(chip_e chip, unsigned int log_buffer_base);

#endif
